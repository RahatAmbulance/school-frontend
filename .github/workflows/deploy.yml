name: Build and Deploy Frontend

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: scholiq-frontend
  CONTAINER_PORT: 80
  HOST_PORT: 3000
  NODE_VERSION: '16'

jobs:
  build-and-deploy:
    runs-on: [self-hosted, frontend]  # Changed from ubuntu-latest, targets frontend runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          npm audit fix --force || true

      - name: Verify react-scripts installation
        run: |
          npx react-scripts --version
          ls -la node_modules/.bin/ | grep react-scripts

      - name: Build application
        run: |
          NODE_OPTIONS="--max_old_space_size=4096" npm run build
        env:
          CI: false
          GENERATE_SOURCEMAP: false

      - name: List build output
        run: |
          ls -la build/
          du -sh build/

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Stop and Remove Existing Container
        run: |
          echo "🔍 Stopping existing frontend services..."
          docker stop scholiq-frontend || true
          docker rm scholiq-frontend || true

      - name: Deploy Frontend Container
        run: |
          echo "🚀 Starting frontend container..."
          docker run -d --name scholiq-frontend \
            --restart unless-stopped \
            -p ${{ env.HOST_PORT }}:${{ env.CONTAINER_PORT }} \
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Verify Deployment
        run: |
          echo "⏳ Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q scholiq-frontend; then
            echo "✅ Frontend container is running"
            docker ps | grep scholiq-frontend
          else
            echo "❌ Frontend container failed to start"
            docker logs scholiq-frontend --tail 20
            exit 1
          fi
          
          # Health check
          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12..."
            if curl -sf http://localhost:${{ env.HOST_PORT }}/ > /dev/null; then
              echo "✅ Frontend is running successfully!"
              echo "🌐 Application accessible at: http://89.116.21.135:${{ env.HOST_PORT }}"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "❌ Frontend health check failed"
              docker logs scholiq-frontend --tail 50
              exit 1
            fi
            echo "⏳ Waiting 5 seconds before next check..."
            sleep 5
          done

      - name: Cleanup Old Images
        run: |
          echo "🧹 Cleaning up old Docker images..."
          # Keep the latest 3 images, remove older ones
          docker images scholiq-frontend --format "table {{.Tag}}\t{{.ID}}" | grep -v latest | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true
          
          # Clean up dangling images
          docker image prune -f
          
          echo "📊 Final container status:"
          docker ps | grep scholiq-frontend
